workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "api"

variables:
  ENV_FILE: "env_vars.env"
  DRY_RUN: "false"
  GIT_DEPTH: 1

before_script:
  - export EJ_FOLDER_WORK=/builds/workspace # a directory with all files generated by Junie
  - export MATTERHORN_DEBUG_LOG=true
  - export INGRAZZIO_HOST="https://ingrazzio-for-gitlab.labs.jb.gg"
  - export INGRAZZIO_URL="$INGRAZZIO_HOST"
  - export GIT_REMOTE_URL="${CI_SERVER_PROTOCOL}://oauth2:${APP_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git"
  - export DOT_MATTERHORN="$EJ_FOLDER_WORK/.matterhorn"
  - export EJ_AUTH_GITHUB_TOKEN="$CI_JOB_TOKEN"
  - export EJ_PROJECT=$(realpath ".")
  - export EJ_FOLDER_IDE_CACHES=$(realpath $EJ_FOLDER_WORK)
  - export EJ_FOLDER_IDE_CONFIG=$(realpath $EJ_FOLDER_WORK)
  - export EJ_FOLDER_AGENT_CACHES=$(realpath $EJ_FOLDER_WORK)
  - export EJ_IDE_NAME=IdeaUltimate # TODO: set dynamically
  - export EJ_RUN_AS_ROOT=false
  - export RUNNER_DOWNLOAD_URL="https://github.com/jetbrains-junie/junie/releases/download/289.1/junie-cloud-business-251.289.1-linux-amd64.zip"
  - |
    if [ -n "$ISSUE_ID" ]; then
      export JUNIE_BRANCH="junie-issue-$ISSUE_ID-$CI_PIPELINE_ID"
      export JUNIE_COMMIT_MSG="[Junie] Automated changes for issue #$ISSUE_ID"
    else
      export SHORT_REF=$(echo $CI_COMMIT_REF_NAME | cut -c1-8)
      export JUNIE_BRANCH="junie-$SHORT_REF"
      export JUNIE_COMMIT_MSG="[Junie] Automated changes ($SHORT_REF)"
    fi
  - sudo apt-get update
  - sudo apt-get install -y openjdk-17-jdk git rsync sed gettext jq || true
  - export EJ_FOLDER_UPLOADS="$EJ_FOLDER_WORK/uploads"
  - mkdir -p $EJ_FOLDER_WORK
  - rm -rf "$EJ_FOLDER_UPLOADS" || true
  - mkdir -p "$EJ_FOLDER_UPLOADS"
  - |
    if [ -n "$EJ_UPLOAD_URLS" ]; then
      IFS=';' read -ra URLS <<< "$EJ_UPLOAD_URLS"
      for url in "${URLS[@]}"; do
        full_url="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}${url}"
        filename=$(basename "$url")
        target_path="$EJ_FOLDER_UPLOADS/$filename"
        echo "Downloading: $full_url -> $target_path"
        curl --fail --header "Authorization: Bearer $APP_TOKEN" \
             -o "$target_path" "$full_url"
      done
    fi
  - export EJ_TASK="$(echo "$EJ_TASK" | sed 's/%\([^%]*\)%/\$\1/g' | envsubst)"
  - curl -o $EJ_FOLDER_WORK/junie.zip -L $RUNNER_DOWNLOAD_URL
  - unzip $EJ_FOLDER_WORK/junie.zip -d $EJ_FOLDER_WORK
  - printenv
  - printenv  > $ENV_FILE


after_script:
  - |
    while IFS='=' read -r key value; do
      [[ -z "$key" ]] && continue

      if [[ "$key" =~ ^[a-zA-Z_][a-zA-Z0-9_]*$ ]]; then
        if [ -z "${!key+x}" ]; then
          export "$key"="$value" || continue
        fi
      fi
    done < "$ENV_FILE"
  - rm $ENV_FILE
  - export JUNIE_SUMMARY="$(jq -r '.content.output' "$DOT_MATTERHORN"/*issue_md.*swe_patch*)" || true
  - export JUNIE_SUMMARY_ESCAPED=$(printf "%s" "$JUNIE_SUMMARY" | jq -R -c . | sed 's/^"\(.*\)"$/\1/') || true
  - |
    if [ "$DRY_RUN" != "true" ]; then
      EJ_RUNNER_INFO_DATA=$(echo "$EJ_RUNNER_INFO" \
        | sed 's/%\([^%]*\)%/\$\{\1\}/g' \
        | envsubst)
    
      echo "$EJ_RUNNER_INFO_DATA"
      curl -v -L --request POST "${APP_API_URL}/runner/results" \
        --header "X-Gitlab-Token: $APP_TOKEN" \
        --header "Content-Type: application/json" \
        --data "$EJ_RUNNER_INFO_DATA"
    else
      echo "DRY_RUN is true, skip sending"
    fi
  - mkdir -p "$CI_PROJECT_DIR/logs"
  - cp -r "$DOT_MATTERHORN"/* "$CI_PROJECT_DIR/logs/"

stages:
  - build

run_junie:
  stage: build
  image: cimg/base:stable
  script:
    - echo "===== [STAGE] Setup & Run Junie ====="
    - echo "template - $MR_DESCRIPTION"
    - $EJ_FOLDER_WORK/junie/bin/junie
    - git status
    - echo "===== [STAGE] Save Junie Summary ====="
    - |
      if ! ls $DOT_MATTERHORN/*issue_md.*swe_patch* 1> /dev/null 2>&1; then
        echo "No $DOT_MATTERHORN/*issue_md.*swe_patch* file found!" >&2
        ls -la $DOT_MATTERHORN
        exit 1
      fi
    - echo "===== [STAGE] Restore or Remove .idea ====="
    - |
      if git ls-tree -d HEAD .idea | grep "\.idea" >/dev/null 2>&1; then
        echo "Restoring tracked '.idea' directory"
        git checkout -- .idea
        git clean -f -d .idea
      else
        echo "Removing untracked '.idea' directory"
        sudo rm -rf .idea
      fi
    - echo "===== [STAGE] Commit and Push Changes ====="
    - |
      if git lfs env > /dev/null 2>&1; then
        sudo chown -R $(whoami) .git || true
        chmod -R u+w .git/hooks || true
        git lfs update --force
      fi
    - git config --global user.name "Junie"
    - git config --global user.email "Junie@jetbrains.com"
    - git config --global --add safe.directory "$CI_PROJECT_DIR"
    - git checkout -b "$JUNIE_BRANCH" || git checkout "$JUNIE_BRANCH"
    # - git branch --set-upstream-to=origin/"$JUNIE_BRANCH" || true
    # - git pull --rebase --strategy=recursive -X ours
    - git status
    - git add -A :!$ENV_FILE
    - |
      if ! git diff --cached --quiet; then
        git commit -m "$JUNIE_COMMIT_MSG"
        if [ "$DRY_RUN" != "true" ]; then
          git remote set-url origin "$GIT_REMOTE_URL"
          git push --set-upstream origin "$JUNIE_BRANCH"
        else
          echo "DRY_RUN is true, skipping git push."
        fi
      else
        echo "No changes to commit."
      fi
  artifacts:
    name: "junie-logs"
    paths:
      - logs/**
    expire_in: 1 day
    when: always